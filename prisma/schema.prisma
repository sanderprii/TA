// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int                @id @default(autoincrement())
  username         String             @unique
  password         String
  fullName         String?
  dateOfBirth      DateTime?
  sex              String?
  email            String?            @unique
  isAffiliateOwner Boolean?
  records          Record[]
  trainings        Training[]
  monthlyGoal      Int?
  classSchedules   ClassSchedule[]
  Plan             Plan[]
  Affiliate        Affiliate[]
  AffiliateTrainer AffiliateTrainer[]
  classAttendances ClassAttendee[]
}

model Training {
  id        Int        @id @default(autoincrement())
  type      String
  wodName   String?
  wodType   String? // For Time, EMOM, Tabata, AMRAP
  date      DateTime?
  score     String?
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  exercises Exercise[]
}

model Exercise {
  id           Int      @id @default(autoincrement())
  exerciseData String
  trainingId   Int
  training     Training @relation(fields: [trainingId], references: [id])
}

model Record {
  id     Int       @id @default(autoincrement())
  type   String?
  name   String?
  date   DateTime?
  score  String?
  weight Float?
  time   String?
  userId Int
  user   User      @relation(fields: [userId], references: [id])
}

model defaultWOD {
  id          Int    @id @default(autoincrement())
  name        String @unique
  type        String
  description String
}

model ClassSchedule {
  id             Int             @id @default(autoincrement())
  trainingName   String
  time           DateTime
  trainer        String?
  memberCapacity Int
  location       String?
  repeatWeekly   Boolean         @default(false)
  ownerId        Int
  owner          User            @relation(fields: [ownerId], references: [id])
  seriesId       Int?
  attendees      ClassAttendee[]
}

model Plan {
  id             Int     @id @default(autoincrement())
  name           String
  validityDays   Int
  price          Float
  additionalData String?
  ownerId        Int
  owner          User    @relation(fields: [ownerId], references: [id])
}

model Affiliate {
  id           Int                @id @default(autoincrement())
  name         String
  address      String
  trainingType String
  ownerId      Int
  owner        User               @relation(fields: [ownerId], references: [id])
  trainers     AffiliateTrainer[]
}

model AffiliateTrainer {
  id          Int       @id @default(autoincrement())
  affiliateId Int
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
  trainerId   Int
  trainer     User      @relation(fields: [trainerId], references: [id])
  // Optional: @@unique([affiliateId, trainerId]) to prevent duplicates
  @@unique([affiliateId, trainerId])
}

model ClassAttendee {
  id            Int           @id @default(autoincrement())
  classId       Int
  classSchedule ClassSchedule @relation(fields: [classId], references: [id])
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())

  @@unique([classId, userId]) // v√§ltimaks duplikaatregistratsioone
}
